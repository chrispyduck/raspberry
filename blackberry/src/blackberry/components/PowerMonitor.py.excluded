from __future__ import print_function
import logging, time, os.path, signal
from blackberry.shared.EventHook import EventHook
from blackberry.configuration.ConfigData import CurrentConfig
from blackberry.shared.Gpio import GpioInputMonitor
from blackberry.shared.Gpio import GpioSimpleOutput

class PowerMonitor(object):
    def __init__(self):
        self._logger = logging.getLogger(self.__class__.__name__)
        self._logger.debug('PowerMonitor(): initializing')
        
        self.startup = EventHook()
        self.shutdown = EventHook()
        self._vBatt_change(self.vBatt.value)
        self._vAcc_change(self.vAcc.value)
        
        signal.signal(signal.SIGUSR1, self.OnSignal)
        signal.signal(signal.SIGUSR2, self.OnSignal)
        
        self._logger.debug('PowerMonitor(): initialization complete')        
        
    def OnSignal(self, sig, frame):
        if sig == signal.SIGUSR1:
            self._logger.warn('Manually activating due to SIGUSR1')
            self._activate()
        elif sig == signal.SIGUSR2:
            self._logger.warn('Manually deactivating due to SIGUSR2')
            self._deactivate()
        
    def _vAcc_change(self, value):
        if value:
            self._logger.info('vAcc power on')
            self._activate()
        else:
            self._logger.info('vAcc power off')
            self._deactivate()
    
    def _vBatt_change(self, value):
        self._logger.info('vBatt power %s', 'on' if value else 'off')
    
    def _activate(self):
        self.startup.fire()
    
    def _deactivate(self):
        self.shutdown.fire()